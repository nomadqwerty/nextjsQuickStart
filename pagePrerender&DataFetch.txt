/////////////////////////////////////////////////
page Pre rendering.

// traditional react require javascript to be executed before content shows up. the webapp is first built and executed in the browser then async js(if any) will then be executed(networking,promises,timers) which will in total take some time. in the case of seo(google crawl bots) crawlers do not execute javascript and because seo needs our content it wont be seen by the bots.

// how nextjs pre rendering works

// because of the down side for traditional react webapps. next solves this by pre generating the content. nextjs pre renders the full html with all the data that might be needed and serves this complete but static html content. this boosts load speed and bots do not need to execute js to be able to see our content.

// but we also want an interactive webapp thus react. so next just doesnt send back the complete(but static) html content. after it has sent the html content it will then send the javascript associated with the html. this process is called hydration. the javascript is injected in to the page which then makes our app a fully interactive react app.


// there are two types of pre rendering:
1 static generation
2 server side rendering

//////////////////////////////////////////////////////////////////////
// static generation.
// this means that we pre generate a page on build time, all the html css content that is to sent to client are pregenerated before time.
// we are allowed to write code that only runs in nodejs, and cant write client side code.



basically we have to do two things
1. tell next js what content to pre render.
2. tell next js what data is needed by the presendered content

//nb nextjs prerenders static content by default, but not dynamically generated content(needs javascript). so one thing is handled. we also need to be able to tell nextjs when to not pre render a page.

getStaticProps is a functions that confirms to nextjs that we want a page to prerendered and to set a static state (data) the content will need. getStaticProps doesnnt tell nextjs to prerendere it only confirms that we want a pre render.

getStaticProps is an async funtion, this function runs in build time(the static site is built on the server then sent to client), in the space of time we can execute server side code. server side code that we will use to generate our static data(reading data from a json file stored in our next app folder). we cant access client apis because the static site is built on the server(nodejs)

export async getStaticProps(){
    // scope to write nodejs code.

    // return an object with the props key always
    return {
        props:{
            static:data

        }
    }
}


//for next to ssg our app, run next build command. this generates an optimized version of our app, in that we also will have the ssg pages. 

//  when implementing ssg with static props, if we have an application that will need to update the props constantly we will always have to rebuild the static content to be served, so that getStaticProps will run again and we will then see new props.

// there is a way to update props without having to rebuild the static content manually.
// isg: incremental static generation.

// isg first pre generate the pages to be served. still uses getStaticProps function but with a few changes and specifications we can tell getStaticProps to run on interval and regenerate the pages(with new changes) per incoming requests with specified amount of timeframe. we also have to specify the timeframe that next should regenerate the pages. per seconds.

export async getStaticProps(){
    // scope to write nodejs code.

    // return an object with the props key always
    return {
        props:{
            static:data

        },
        // in the object we return and a second field called revalidate(specify the time frame for regeneration)
        revalidate:120
    }
}

// ssg only runs on build time. but with isg the same code that runs during build time, will continually be run on server even after its built and sent to client.

// more object options for getStaticProps

we can specifiy a field called notFound (bool), if true it will return a 404, we also can specify a redirect field, this will redirect the client to another page.

export async getStaticProps(){

    if(someCoditionIsMet){
        return {
            redirect:{
                destination:'/pathToGo'
            }
        }
    }
    if(someCoditionIsMet){
        return {
            notFound: true,
        }
    }

    return {
        props:{
            static:data

        },
        revalidate:120
    }
}


// get static props on dynamic pages, with dynamic pages we have acces to context params in getStatic function. from this we can get our path params. while running server code.

// getStaticPaths: when we need to render content for dynamic paths(params), we use getStaticProps with getStaticPath

// getStaticPaths is a function that will return a set of set params(dynamic paths value), getStaticProps will then run for every param specified. if we have 4 params getStaticProps will run 4 times.
// it basically is a function that passes the params to getStaticProps function to perfom further operations with the data.

export async function getStaticPaths() {
  return {
    paths: [
      { params: { pid: "p1" } },
      { params: { pid: "p2" } },
      { params: { pid: "p3" } },
    ],
    fallback: false,
  };
}

// when SSGing dynamic paths, next js pre fetches our data for all specified params, then once our static content has been built and sent to the client. nextjs will also send all the pre fetched data for all the static paths.  


// fallback: this property is usefull, for when we want to SSG many dynamic paths. pre generating multiple pages is not optimal, we need to pregenerate content that is important or frequently view by users. but that doesnt mean we should leave out the remaining content. if fallback is set to true, any param not specified in paths object will be generated in realtime. 
// to make use of the fallback property, our react component needs a fallback html content.

// fallback has a 3rd option 'blocking' this is a string that tells nextjs to render the unspecified params as a normal page, wait for the component to be fully loaded before continuing with the request.

// add fallback 404 page if data for given params is not found.


/////////////////////////////////////////////////////////////////////////
// server side rendering. with next js we can build ssr react apps. next js gives us access to a function, which will be passed a request object(request related to the current url being requested by the client). with access to request we can the run operations. the function doesnt run on build time but when a request hits the nextjs server.

// getServerSideProps: function runs for every incoming request that requests that page. works just like getStaticProps, it has to return the exact same object format.